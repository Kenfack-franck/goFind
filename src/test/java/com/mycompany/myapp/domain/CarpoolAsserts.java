package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CarpoolAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarpoolAllPropertiesEquals(Carpool expected, Carpool actual) {
        assertCarpoolAutoGeneratedPropertiesEquals(expected, actual);
        assertCarpoolAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarpoolAllUpdatablePropertiesEquals(Carpool expected, Carpool actual) {
        assertCarpoolUpdatableFieldsEquals(expected, actual);
        assertCarpoolUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarpoolAutoGeneratedPropertiesEquals(Carpool expected, Carpool actual) {
        assertThat(expected)
            .as("Verify Carpool auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarpoolUpdatableFieldsEquals(Carpool expected, Carpool actual) {
        assertThat(expected)
            .as("Verify Carpool relevant properties")
            .satisfies(e -> assertThat(e.getOrigin()).as("check origin").isEqualTo(actual.getOrigin()))
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()))
            .satisfies(e -> assertThat(e.getDepartureTime()).as("check departureTime").isEqualTo(actual.getDepartureTime()))
            .satisfies(e -> assertThat(e.getSeatsAvailable()).as("check seatsAvailable").isEqualTo(actual.getSeatsAvailable()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarpoolUpdatableRelationshipsEquals(Carpool expected, Carpool actual) {
        assertThat(expected)
            .as("Verify Carpool relationships")
            .satisfies(e -> assertThat(e.getPassengers()).as("check passengers").isEqualTo(actual.getPassengers()))
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()));
    }
}
